{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#data-governance-workshop","title":"Data Governance Workshop","text":""},{"location":"#watson-knowledge-catalog","title":"Watson Knowledge Catalog","text":"<p>Welcome to the workshop</p>"},{"location":"#provision-the-service","title":"Provision the service","text":""},{"location":"#get-token","title":"Get Token","text":"<p>The token will expire after one hour</p> PythonBash token.py<pre><code>import json\nimport requests\n# Read the API key from the file downloaded in the IBM Cloud\nf = open(\"wkcapikey.json\")\ndata = json.load(f)\napikey = data[\"apikey\"]\n# Get a bearer token with the API key\nurl = \"https://iam.cloud.ibm.com/identity/token\"\nheaders = {\"Content-Type\" : \"application/x-www-form-urlencoded\"}\ndata = \"grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\" + apikey\nr = requests.post(url, headers=headers, data=data)\naccess_token = r.json()[\"access_token\"]\n</code></pre> token.sh<pre><code>#!/bin/bash \n# Read the API key from the file downloaded in the IBM Cloud\nFILEAPIKEY=wkcapikey.json\napikey=$(jq -r .apikey $FILEAPIKEY)\n# Get a bearer token with the API key\nurl=\"https://iam.cloud.ibm.com/identity/token\"\nheader=\" -H Content-Type: application/x-www-form-urlencoded \"\nflags=\" -s -X POST\"\ndata=\" -d grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\"\ndata=${data}${apikey}\ntoken=$( \\\ncurl $flags $url $header $data \\\n| jq -r .access_token)\n</code></pre>"},{"location":"#projects-and-catalogs","title":"Projects and Catalogs","text":"<p>Inspect existing artifacts</p> PythonBash projects_and_catalogs.py<pre><code>    # With the bearer token, we can issue requests \nprint(\"---- Projects ----\")\nurl = \"https://api.eu-de.dataplatform.cloud.ibm.com/v2/projects\"\nheaders = {\"content-type\" : \"application/json\", \"Authorization\" : \"Bearer \" + access_token}\nr = requests.get(url, headers=headers)\nfor i in r.json()[\"resources\"] :\nprint(i[\"entity\"][\"name\"])\nprint(\"---- Catalogs ----\")\nurl = \"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs\"\nheaders = {\"content-type\" : \"application/json\", \"Authorization\" : \"Bearer \" + access_token}\nr = requests.get(url, headers=headers)\nfor i in r.json()[\"catalogs\"] :\nprint(i[\"entity\"][\"name\"])\n</code></pre> projects_and_catalogs.sh<pre><code>    # With the bearer token, we can issue requests \necho \"---- Projects ----\"\nurl=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/projects\"\nflags=\" -s -X GET\"\nheader=\"-H content-type: application/json\"  curl $flags $url $header \\\n-H \"Authorization: Bearer ${token}\" | jq  '.resources[].entity.name'\necho \"---- Catalogs ----\"\nurl=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs\"\nflags=\" -s -X GET\"\nheader=\"-H content-type: application/json\" # all catalogs\ncurl $flags $url $header \\\n-H \"Authorization: Bearer ${token}\" | jq '.catalogs[].entity.name'     </code></pre>"},{"location":"#one-specific-item","title":"One specific item","text":"<p>Get only one artifact</p> PythonBash only_one_item.py<pre><code>        print(\"---- The catalog called Catalog-Angel ----\")\nmycatalog=\"Catalog-Angel\"\nurl=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs?name=\" + mycatalog\nr = requests.get(url, headers=headers)\nfor i in r.json()[\"catalogs\"] :\nprint(i[\"metadata\"][\"guid\"])\nprint(i[\"entity\"][\"name\"])\nmycatalog_id = i[\"metadata\"][\"guid\"] \nprint(f\"---- The catalog with id = {mycatalog_id}  ----\")\nurl=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs/\" + mycatalog_id\nr = requests.get(url, headers=headers)\nprint(r.json()[\"entity\"][\"name\"])\n</code></pre> only_one_item.sh<pre><code>        #  my catalog by name\nCATALOG_NAME=\"Catalog-Angel\"\nparams=\"?name=${CATALOG_NAME}\"\necho ---- The catalog named $CATALOG_NAME ----\n\ncurl $flags $url$params $header \\\n-H \"Authorization: Bearer ${token}\" | jq '.catalogs[] | [ .metadata.guid , .entity.name ]'\n#  my catalog by id\nmycatalog_id=$(curl $flags $url$params $header \\\n-H \"Authorization: Bearer ${token}\" | jq -r '.catalogs[] | .metadata.guid ')\necho --- The catalog with id=$mycatalog_id ----\n\nurl=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs/$mycatalog_id\"\ncurl $flags $url $header \\\n-H \"Authorization: Bearer ${token}\" | jq '.entity.name '     </code></pre>"},{"location":"#everything-together","title":"Everything together","text":"<p>Retrieve specfic assets</p> Python projects_and_catalogs.py<pre><code>        import json\nimport requests\n# Read the API key from the file downloaded in the IBM Cloud\nf = open(\"wkcapikey.json\")\ndata = json.load(f)\napikey = data[\"apikey\"]\n# Get a bearer token with the API key\nurl = \"https://iam.cloud.ibm.com/identity/token\"\nheaders = {\"Content-Type\" : \"application/x-www-form-urlencoded\"}\ndata = \"grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\" + apikey\nr = requests.post(url, headers=headers, data=data)\naccess_token = r.json()[\"access_token\"]\n# With the bearer token, we can issue requests \nprint(\"---- All Categories ----\")\nurl = \"https://api.eu-de.dataplatform.cloud.ibm.com/v3/search\"\nheaders = {\"content-type\" : \"application/json\", \"Authorization\" : \"Bearer \" + access_token}\ndata = '''{\n            \"query\": {\n                \"match\": {\n                    \"metadata.artifact_type\": \"category\"\n                }\n            }\n        }'''\nr = requests.post(url, headers=headers, data=data)\nfor i in r.json()[\"rows\"] :\nprint(i[\"metadata\"][\"name\"])\nprint(\"---- Business Terms of MotoGP ----\")\ndata='''{\n            \"_source\":[ \"metadata.name\", \"metadata.description\"],\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"metadata.artifact_type\": \"glossary_term\"\n                            }\n                        },\n                        {\n                            \"match\": {\n                                \"categories.primary_category_name\": \"MotoGP\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }'''\nr = requests.post(url, headers=headers, data=data)\nfor i in r.json()[\"rows\"] :\nprint(i[\"metadata\"][\"name\"], end=\": \")\nprint(i[\"metadata\"][\"description\"], end=\"\\n\\n\")\n</code></pre>"},{"location":"part01/p0101/","title":"1.1. Service Provisioning","text":""},{"location":"part01/p0101/#part-1","title":"Part 1\u00b6","text":""},{"location":"part01/p0101/#chapter-11","title":"Chapter 1.1\u00b6","text":""},{"location":"part01/p0102/","title":"1.2. Catalog Creation","text":""},{"location":"part01/p0102/#part-1","title":"Part 1\u00b6","text":""},{"location":"part01/p0102/#chapter-12","title":"Chapter 1.2\u00b6","text":""},{"location":"part01/p0103/","title":"1.3. Business Terms","text":""},{"location":"part01/p0103/#part-1","title":"Part 1\u00b6","text":""},{"location":"part01/p0103/#chapter-13","title":"Chapter 1.3.\u00b6","text":""},{"location":"part02/p0201/","title":"2.1. Privacy","text":""},{"location":"part02/p0201/#part-2","title":"Part 2\u00b6","text":""},{"location":"part02/p0201/#chapter-21","title":"Chapter 2.1\u00b6","text":""},{"location":"part02/p0202/","title":"2.2. Data Quality","text":""},{"location":"part02/p0202/#part-2","title":"Part 2\u00b6","text":""},{"location":"part02/p0202/#chapter-21","title":"Chapter 2.1\u00b6","text":""}]}