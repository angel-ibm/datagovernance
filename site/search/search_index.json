{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#data-governance-tutorial","title":"Data Governance Tutorial","text":"<p>Welcome to data governance with IBM Cloud Pak for Data and IBM Knowledge Catalog. </p> <p>Presentation video. Choose the tab of your preferred language</p> DeutschEspa\u00f1olEnglish <p></p> <p></p> <p></p> <p>Data Governance:  https://www.ibm.com/products/cloud-pak-for-data/governance</p> <p>IBM Knowledge Catalog: https://www.ibm.com/products/knowledge-catalog</p>"},{"location":"#watson-data-api","title":"Watson Data API","text":"<p>The Watson API is a REST interface that can be very useful in the following situations:</p> <ul> <li>Export and import artifacts from local files without the need of navigating through the menus</li> <li>Automate tasks like backups and migrations</li> <li>Interface with other tools and programs that may use the REST interface  </li> </ul>"},{"location":"#bearer-token","title":"Bearer Token","text":"<p>Obtaining a bearer token and refreshing it when it expires are mandatory pre-requisites for all calls. The full process is explaned here </p> <p>Bearer tokens issued by the IBM Cloud expire after one hour. Remember to obtain a new one regularly</p> <p>The following snippets will generate a bearer token derived from the API key</p> PythonBash token.py<pre><code>import json\nimport requests\n\n# Read the API key from the file downloaded in the IBM Cloud\nf = open(\"wkcapikey.json\")\ndata = json.load(f)\napikey = data[\"apikey\"]\n\n# Get a bearer token with the API key\nurl = \"https://iam.cloud.ibm.com/identity/token\"\nheaders = {\"Content-Type\" : \"application/x-www-form-urlencoded\"}\ndata = \"grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\" + apikey\n\nr = requests.post(url, headers=headers, data=data)\naccess_token = r.json()[\"access_token\"]\n</code></pre> token.sh<pre><code>#!/bin/bash \n\n# Read the API key from the file downloaded in the IBM Cloud\n\nFILEAPIKEY=wkcapikey.json\napikey=$(jq -r .apikey $FILEAPIKEY)\n\n# Get a bearer token with the API key\n\nurl=\"https://iam.cloud.ibm.com/identity/token\"\nheader=\" -H Content-Type: application/x-www-form-urlencoded \"\nflags=\" -s -X POST\"\ndata=\" -d grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\"\ndata=${data}${apikey}\n\ntoken=$( \\\n    curl $flags $url $header $data \\\n    | jq -r .access_token)\n</code></pre>"},{"location":"#common-tasks","title":"Common Tasks","text":"<p>Provided that the issuer of the call has been granted with the proper rights, the following tasks can be easily performed using the API and will be exercised in this chapter:</p> REST Call Description <code>GET /v2/projects</code> List the projects available for the issuer of the call in Cloud Pak for Data <code>GET /v2/catalogs</code> List the catalogs available in Cloud Pak for Data. Not only the list, but the specific information of one of them can be retrieved using parameter filtering <code>POST /v3/search</code> Search for any piece of information by using queries in Lucene or Elasticsearch syntax <code>GET /v3/governance_artifact_types/export</code> Export the full set of artifacts to a ZIP file <code>GET /v3/governance_artifact_types/{artifact_type}/export</code> Export just one kind of artifacts to a CSV file. The business terms (<code>glossary_term</code>) will be shown ind this chapter <code>POST /v3/governance_artifact_types/import</code> Import all artifacts from a ZIP file. <code>POST /v3/governance_artifact_types/{artifact_type}/import</code> Import just one kind of artifacts from a CSV file. The business terms (<code>glossary_term</code>) will be shown in this chapter"},{"location":"#projects-and-catalogs","title":"Projects and Catalogs","text":"<p>Inspect existing artifacts</p> PythonBash projects_and_catalogs.py<pre><code>    # With the bearer token, we can issue requests \n\n    print(\"---- Projects ----\")\n\n    url = \"https://api.eu-de.dataplatform.cloud.ibm.com/v2/projects\"\n    headers = {\"content-type\" : \"application/json\", \"Authorization\" : \"Bearer \" + access_token}\n\n    r = requests.get(url, headers=headers)\n    for i in r.json()[\"resources\"] :\n        print(i[\"entity\"][\"name\"])\n\n    print(\"---- Catalogs ----\")\n\n    url = \"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs\"\n    headers = {\"content-type\" : \"application/json\", \"Authorization\" : \"Bearer \" + access_token}\n\n    r = requests.get(url, headers=headers)\n    for i in r.json()[\"catalogs\"] :\n        print(i[\"entity\"][\"name\"])\n</code></pre> projects_and_catalogs.sh<pre><code>    # With the bearer token, we can issue requests \n\n    echo \"---- Projects ----\"\n\n    url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/projects\"\n    flags=\" -s -X GET\"\n    header=\"-H content-type: application/json\"  \n    curl $flags $url $header \\\n       -H \"Authorization: Bearer ${token}\" | jq  '.resources[].entity.name'\n\n    echo \"---- Catalogs ----\"\n\n    url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs\"\n    flags=\" -s -X GET\"\n    header=\"-H content-type: application/json\" \n\n    # all catalogs\n    curl $flags $url $header \\\n       -H \"Authorization: Bearer ${token}\" | jq '.catalogs[].entity.name'     \n</code></pre>"},{"location":"#one-specific-item","title":"One specific item","text":"<p>Get only one artifact</p> PythonBash only_one_item.py<pre><code>        print(\"---- The catalog called Catalog-Angel ----\")\n        mycatalog=\"Catalog-Angel\"\n        url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs?name=\" + mycatalog\n\n        r = requests.get(url, headers=headers)\n        for i in r.json()[\"catalogs\"] :\n            print(i[\"metadata\"][\"guid\"])\n            print(i[\"entity\"][\"name\"])\n\n        mycatalog_id = i[\"metadata\"][\"guid\"] \n        print(f\"---- The catalog with id = {mycatalog_id}  ----\")\n\n        url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs/\" + mycatalog_id\n        r = requests.get(url, headers=headers)\n        print(r.json()[\"entity\"][\"name\"])\n</code></pre> only_one_item.sh<pre><code>        #  my catalog by name\n        CATALOG_NAME=\"Catalog-Angel\"\n        params=\"?name=${CATALOG_NAME}\"\n\n        echo ---- The catalog named $CATALOG_NAME ----\n\n        curl $flags $url$params $header \\\n           -H \"Authorization: Bearer ${token}\" | jq '.catalogs[] | [ .metadata.guid , .entity.name ]'\n\n        #  my catalog by id\n        mycatalog_id=$(curl $flags $url$params $header \\\n           -H \"Authorization: Bearer ${token}\" | jq -r '.catalogs[] | .metadata.guid ')\n\n        echo --- The catalog with id=$mycatalog_id ----\n\n        url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v2/catalogs/$mycatalog_id\"\n\n    curl $flags $url $header \\\n   -H \"Authorization: Bearer ${token}\" | jq '.entity.name '     \n</code></pre> <p>Retrieve specfic assets</p> <p>The following snippets will obtain  </p> Pythonbash projects_and_catalogs.py<pre><code>        import json\n        import requests\n\n        # Read the API key from the file downloaded in the IBM Cloud\n        f = open(\"wkcapikey.json\")\n        data = json.load(f)\n        apikey = data[\"apikey\"]\n\n        # Get a bearer token with the API key\n        url = \"https://iam.cloud.ibm.com/identity/token\"\n        headers = {\"Content-Type\" : \"application/x-www-form-urlencoded\"}\n        data = \"grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\" + apikey\n\n        r = requests.post(url, headers=headers, data=data)\n        access_token = r.json()[\"access_token\"]\n\n        # With the bearer token, we can issue requests \n\n        print(\"---- All Categories ----\")\n\n        url = \"https://api.eu-de.dataplatform.cloud.ibm.com/v3/search\"\n        headers = {\"content-type\" : \"application/json\", \"Authorization\" : \"Bearer \" + access_token}\n        data = '''{\n            \"query\": {\n                \"match\": {\n                    \"metadata.artifact_type\": \"category\"\n                }\n            }\n        }'''\n\n        r = requests.post(url, headers=headers, data=data)\n\n        for i in r.json()[\"rows\"] :\n            print(i[\"metadata\"][\"name\"])\n\n        print(\"---- Business Terms of MotoGP ----\")\n\n        data='''{\n            \"_source\":[ \"metadata.name\", \"metadata.description\"],\n            \"query\": {\n                \"bool\": {\n                    \"must\": [\n                        {\n                            \"match\": {\n                                \"metadata.artifact_type\": \"glossary_term\"\n                            }\n                        },\n                        {\n                            \"match\": {\n                                \"categories.primary_category_name\": \"MotoGP\"\n                            }\n                        }\n                    ]\n                }\n            }\n        }'''\n\n        r = requests.post(url, headers=headers, data=data)\n        for i in r.json()[\"rows\"] :\n            print(i[\"metadata\"][\"name\"], end=\": \")\n            print(i[\"metadata\"][\"description\"], end=\"\\n\\n\")\n</code></pre> <p>Too many fancy quotes, braces, escape backslashes\u2026 better in python</p>"},{"location":"#export-artifacts","title":"Export Artifacts","text":"<p>Store all artifacts in a zip file</p> bashpython export_all.sh<pre><code>    echo \"---- Export ----\"\n\n\n    url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v3/governance_artifact_types/export?include_custom_attribute_definitions=true\"\n    flags=\" -s -X GET\"\n    header=\"-H content-type: application/json\"  \n    curl $flags $url $header \\\n       -H \"Authorization: Bearer ${token}\" \\\n       -o governance_artifacts.zip\n</code></pre> <p>I think all these import/export will be more often run in shell scripts\u2026 better to use bash for it</p> <p>Change this to export only the business terms in a csv file</p> Bashpython export.sh<pre><code>    echo \"---- Export only the business terms to CSV----\"\n\n    url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v3/governance_artifact_types/glossary_term/export\"\n\n    curl $flags $url $header \\\n       -H \"Authorization: Bearer ${token}\" \\\n       -o business_terms.csv\n</code></pre> <p>I think all these import/export will be more often run in shell scripts\u2026 better to use bash for it</p>"},{"location":"#import-artifacts","title":"Import Artifacts","text":"<p>Import Business Terms</p> Bashpython import_business_terms.sh<pre><code>    echo \"---- Import business terms from CSV----\"\n\n    flags=' -X POST '\n    url=' https://api.eu-de.dataplatform.cloud.ibm.com/v3/governance_artifact_types/glossary_term/import?merge_option=all '\n    header=' -H Content-Type:multipart/form-data '\n\n    curl $flags $url $header \\\n       -H \"Authorization:Bearer ${token}\" \\\n       -F \"file=@\\\"mybusiness_terms.csv\\\";type=text/csv\"\n</code></pre> <p>I think all these import/export will be more often run in shell scripts\u2026 better to use bash for it</p> <p>Import all governance artifacts from a ZIP file</p> Bashpython import_all.sh<pre><code>    echo \"---- Import all artifact from a ZIP File ----\"\n\n    flags=' -s -X POST '\n    url=' https://api.eu-de.dataplatform.cloud.ibm.com/v3/governance_artifact_types/import?merge_option=specified '\n    header=' -H Content-Type:multipart/form-data '\n    import_process=$(curl $flags $url $header \\\n       -H \"Authorization:Bearer ${token}\" \\\n       -F \"file=@\\\"governance_artifacts.zip\\\"\"  \\\n       | jq -r .process_id)\n\n    echo \"----- Import process started: $import_process ----- \"\n\n    flags=' -s -X GET '\n    url=\" https://api.eu-de.dataplatform.cloud.ibm.com/v3/governance_artifact_types/import/status/${import_process} \"\n\n    while true\n    do\n        import_status=$(curl $flags $url \\\n        -H \"Authorization: Bearer ${token}\" \\\n        | jq -r .status)\n\n\n        if [ $import_status != \"IN_PROGRESS\" ]\n        then\n            break\n        fi\n\n        echo Import job in process. Please wait...\n        sleep 5\n    done\n\n    curl $flags $url \\\n        -H \"Authorization: Bearer ${token}\"\n</code></pre> <p>I think all these import/export will be more often run in shell scripts\u2026 better to use bash for it</p>"},{"location":"index%20copy/","title":"Data Governance Tutorial","text":""},{"location":"index%20copy/#data-governance-tutorial","title":"Data Governance Tutorial","text":"<p>Welcome to data governance with IBM Cloud Pak for Data and IBM Knowledge Catalog. </p>"},{"location":"index%20copy/#introduction","title":"Introduction","text":"<p>Please open the following section and watch the video (Engish, German or Spanish) that introduces the main idea of the tutorial.</p> EnglishDeutschEspa\u00f1ol <p></p> <p></p> <p></p> <p>Data Governance:  https://www.ibm.com/products/cloud-pak-for-data/governance IBM Knowledge Catalog: https://www.ibm.com/products/knowledge-catalog</p>"},{"location":"part01/p0101/","title":"P0101","text":"In\u00a0[\u00a0]: Copied! <pre>print(\"This is python code\")\n</pre> print(\"This is python code\")"},{"location":"part01/p0101/#part-1","title":"Part 1\u00b6","text":""},{"location":"part01/p0101/#chapter-11","title":"Chapter 1.1\u00b6","text":""},{"location":"part01/p0101/","title":"Create a Business Vocabulary from scratch","text":""},{"location":"part01/p0101/#create-a-business-vocabulary-from-scratch","title":"Create a Business Vocabulary from scratch","text":"<p>This section describes the process for creating a baseline for business vocabularies that can span all the information to be included in a data catalog</p>"},{"location":"part01/p0101/#categories","title":"Categories","text":"<p>Consider categories like big places of information, like the folder of the highest level in your hierarchy of data. All objects and artifacts that we will create need to be associated to one category.</p> <p>Hello Markdown!</p>"},{"location":"part01/p0101/#creation","title":"Creation","text":"<p>In most of the cases, a category is created and managed by the business data administrator using the GUI of Cloud Pak for Data.</p> Video: creating a Governance Category in Cloud Pak for Data <p></p> <p>However, categories can be created by using the Watson Data API</p> BashPython <p></p>create_category.sh<pre><code>    #!/bin/bash \n\n    # Read the API key from the file downloaded in the IBM Cloud\n\n    FILEAPIKEY=wkcapikey.json\n    apikey=$(jq -r .apikey $FILEAPIKEY)\n\n    # Get a bearer token with the API key\n\n    url=\"https://iam.cloud.ibm.com/identity/token\"\n    header=\" -H Content-Type: application/x-www-form-urlencoded \"\n    flags=\" -s -X POST\"\n    data=\" -d grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\"\n    data=${data}${apikey}\n\n    token=$( \\\n        curl $flags $url $header $data \\\n        | jq -r .access_token)\n\n    # Create Category\n\n    url=\"https://api.eu-de.dataplatform.cloud.ibm.com/v3/categories\"\n    flags=' -s -X POST'\n    header='-H content-type:application/json' \n    data='{\"name\":\"MotoGP\"}'\n\n    category_id=$(curl $flags $url $header \\\n       -H \"Authorization:Bearer ${token}\" \\\n       -d $data \\\n       | jq -r '.resources[0].artifact_id')\n\n    echo MotoGP Category created with id=$category_id\n</code></pre> <pre><code>$ ./create_category.sh\nMotoGP Category created with id=76a4e01e-9c30-445c-847b-f635fdfe6bdf\n</code></pre> <p></p>create_category.py<pre><code>    import json\n    import requests\n\n    # Read the API key from the file downloaded in the IBM Cloud\n    f = open(\"wkcapikey.json\")\n    data = json.load(f)\n    apikey = data[\"apikey\"]\n\n    # Get a bearer token with the API key\n    url = \"https://iam.cloud.ibm.com/identity/token\"\n    headers = {\"Content-Type\" : \"application/x-www-form-urlencoded\"}\n    data = \"grant_type=urn:ibm:params:oauth:grant-type:apikey&amp;apikey=\" + apikey\n\n    r = requests.post(url, headers=headers, data=data)\n    access_token = r.json()[\"access_token\"]\n\n\n    url = 'https://api.eu-de.dataplatform.cloud.ibm.com/v3/categories'\n    headers = {\"content-type\" : \"application/json\", \"Authorization\" : \"Bearer \" + access_token}\n    data='{\"name\":\"MotoGP\"}'\n\n    r = requests.post(url, headers=headers, data=data)\n    category_id = r.json()[\"resources\"][0][\"artifact_id\"]\n    print(f\"MotoGP category created with the id={category_id}\")\n</code></pre> <pre><code>$ python create_category.py\n MotoGP category created with the id=a6e0264f-1c49-41b5-bec1-2f8ed5cb0479\n</code></pre>"},{"location":"part01/p0102/","title":"P0102","text":"<p>JupyterLite</p> In\u00a0[\u00a0]: Copied! <pre>print(\"This is python code p0102\")\n</pre> print(\"This is python code p0102\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> <pre>print(\"Hello Markdown!\")\n</pre>"},{"location":"part01/p0102/#part-1","title":"Part 1\u00b6","text":""},{"location":"part01/p0102/#chapter-12","title":"Chapter 1.2\u00b6","text":""},{"location":"part01/p0103/","title":"P0103","text":"In\u00a0[1]: Copied! <pre>print(\"This is python code p0103\")\n</pre> print(\"This is python code p0103\") <pre>This is python code p0103\n</pre>"},{"location":"part01/p0103/#part-1","title":"Part 1\u00b6","text":""},{"location":"part01/p0103/#chapter-13","title":"Chapter 1.3.\u00b6","text":""},{"location":"part01/p0103/#pyhon-code","title":"Pyhon code\u00b6","text":""},{"location":"part02/p0201/","title":"P0201","text":""},{"location":"part02/p0201/#part-2","title":"Part 2\u00b6","text":""},{"location":"part02/p0201/#chapter-21","title":"Chapter 2.1\u00b6","text":""},{"location":"part02/p0202/","title":"P0202","text":""},{"location":"part02/p0202/#part-2","title":"Part 2\u00b6","text":""},{"location":"part02/p0202/#chapter-21","title":"Chapter 2.1\u00b6","text":""}]}